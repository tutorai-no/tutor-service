services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: aksio-backend
    command: sh -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    volumes:
      # Mount source code
      - .:/code
      # Prometheus metrics directory
      - prometheus_multiproc:/tmp/prometheus_multiproc_dir
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
      - neo4j
      - broker
      - zookeeper
    environment:
      # Django Configuration
      - DJANGO_DEBUG=True
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY:-django-insecure-dev-key}
      - DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0,backend
      - DJANGO_SETTINGS_MODULE=aksio.settings.development
      
      # Database Configuration
      - DATABASE_HOST=db
      - DATABASE_PORT=5432
      - DATABASE_NAME=aksio_db
      - DATABASE_USER=aksio_user
      - DATABASE_PASSWORD=aksio_password
      
      # Redis Configuration
      - REDIS_URL=redis://redis:6379/0
      
      # Neo4j Configuration
      - NEO4J_URL=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=password
      
      # AI Configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LLM_PROVIDER=${LLM_PROVIDER:-openai}
      - LLM_MODEL=${LLM_MODEL:-gpt-4}
      - LLM_TEMPERATURE=${LLM_TEMPERATURE:-0.7}
      - LLM_MAX_TOKENS=${LLM_MAX_TOKENS:-1000}
      
      # Google Cloud Configuration
      - GOOGLE_CLOUD_PROJECT=${GOOGLE_CLOUD_PROJECT}
      - GCS_BUCKET_NAME=${GCS_BUCKET_NAME}
      - GOOGLE_APPLICATION_CREDENTIALS=${GOOGLE_APPLICATION_CREDENTIALS}
      
      # Email Configuration
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL:-noreply@aksio.app}
      
      # Feature Flags
      - ENABLE_AI_FEATURES=${ENABLE_AI_FEATURES:-True}
      - ENABLE_DOCUMENT_PROCESSING=${ENABLE_DOCUMENT_PROCESSING:-True}
      - ENABLE_REAL_TIME_CHAT=${ENABLE_REAL_TIME_CHAT:-False}
      - ENABLE_KAFKA=${ENABLE_KAFKA:-False}
      
      # External Services
      - SCRAPER_SERVICE_URL=${SCRAPER_SERVICE_URL:-http://scraper-service:8080}
      - RETRIEVER_SERVICE_URL=${RETRIEVER_SERVICE_URL:-http://retriever-service:8002}
      - USE_MOCK_RETRIEVAL_SERVICE=${USE_MOCK_RETRIEVAL_SERVICE:-True}
      
      # Logging
      - LOGGING_LEVEL=${LOGGING_LEVEL:-INFO}
      
      # Payment Configuration
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_PUBLIC_KEY=${STRIPE_PUBLIC_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
    networks:
      - aksio_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  db:
    image: postgres:16
    container_name: aksio-db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=aksio_db
      - POSTGRES_USER=aksio_user
      - POSTGRES_PASSWORD=aksio_password
      - POSTGRES_HOST_AUTH_METHOD=trust
    ports:
      - "5433:5432"
    networks:
      - aksio_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aksio_user -d aksio_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: aksio-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - aksio_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  neo4j:
    image: neo4j:latest
    container_name: aksio-neo4j
    environment:
      NEO4J_AUTH: "neo4j/password"
    ports:
      - "7474:7474"
      - "7687:7687"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "echo 'RETURN 1;' | cypher-shell -u neo4j -p password >/dev/null 2>&1 || exit 1",
        ]
      interval: 30s
      retries: 5
    networks:
      - aksio_network
    volumes:
      - neo4j_data:/data

  broker:
    image: confluentinc/cp-kafka:7.4.0
    container_name: aksio-kafka
    hostname: broker
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    networks:
      - aksio_network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: aksio-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
    ports:
      - "2181:2181"
    networks:
      - aksio_network
    healthcheck:
      test: ["CMD", "sh", "-c", "echo 'health' | nc localhost 2181 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: PGAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: aksio-pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@aksio.app
      - PGADMIN_DEFAULT_PASSWORD=admin
    ports:
      - "5050:80"
    depends_on:
      - db
    networks:
      - aksio_network
    profiles:
      - tools

  # Optional: Kafka UI for Kafka management
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: aksio-kafka-ui
    environment:
      - KAFKA_CLUSTERS_0_NAME=aksio-cluster
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=broker:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    ports:
      - "8080:8080"
    depends_on:
      - broker
    networks:
      - aksio_network
    profiles:
      - tools

  # Optional: Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: aksio-redis-commander
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - aksio_network
    profiles:
      - tools

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  neo4j_data:
    driver: local
  prometheus_multiproc:
    driver: local

networks:
  aksio_network:
    driver: bridge