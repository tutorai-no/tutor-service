# Minimal Environment Configuration for Lightweight Development
# This configuration enables ALL backend features with Neo4j for knowledge graph
# Uses in-memory cache instead of Redis for lighter resource usage
# Copy this file to .env for full functionality

# Django Settings
DJANGO_SECRET_KEY=django-insecure-dev-key-change-in-production
DJANGO_DEBUG=True

# Enable All Features (with lightweight alternatives)
ENABLE_AI_FEATURES=True
ENABLE_DOCUMENT_PROCESSING=True
ENABLE_REAL_TIME_CHAT=True
ENABLE_KAFKA=False  # Kafka disabled - use Redis for messaging
ENABLE_CELERY=True  # Enabled but runs synchronously
ENABLE_NEO4J=True   # Enabled with real Neo4j for knowledge graph
ENABLE_MONITORING=True

# Service Configuration
USE_MOCK_NEO4J=False  # Using real Neo4j container
USE_MOCK_RETRIEVAL_SERVICE=False  # Set to True if retrieval service is not running
USE_MOCK_AI_SERVICE=False  # Keep False to use real OpenAI

# AI Configuration
OPENAI_API_KEY=your-openai-api-key-here  # Required for AI features
LLM_PROVIDER=openai
LLM_MODEL=gpt-4
LLM_TEMPERATURE=0.7
LLM_MAX_TOKENS=1000

# Celery Configuration - Run synchronously in development
CELERY_TASK_ALWAYS_EAGER=True
CELERY_TASK_EAGER_PROPAGATES=True

# Database (using local PostgreSQL from Docker)
DATABASE_HOST=db
DATABASE_PORT=5432
DATABASE_NAME=aksio_db
DATABASE_USER=aksio_user
DATABASE_PASSWORD=aksio_password

# Redis Configuration (using in-memory cache instead)
# Leave REDIS_URL empty to use Django's local memory cache
REDIS_URL=

# Neo4j Configuration
NEO4J_URL=bolt://neo4j:7687
NEO4J_USERNAME=neo4j
NEO4J_PASSWORD=password

# Logging
LOGGING_LEVEL=INFO

# External Services (mocked)
SCRAPER_SERVICE_URL=http://mock:8080
RETRIEVER_SERVICE_URL=http://mock:8080