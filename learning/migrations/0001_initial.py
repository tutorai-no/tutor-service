# Generated by Django 5.1.11 on 2025-07-19 11:23

import datetime
import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('courses', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='StudyPlan',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('plan_type', models.CharField(choices=[('weekly', 'Weekly Plan'), ('monthly', 'Monthly Plan'), ('exam_prep', 'Exam Preparation'), ('custom', 'Custom Plan')], max_length=20)),
                ('status', models.CharField(choices=[('active', 'Active'), ('paused', 'Paused'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='active', max_length=20)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('target_exam_date', models.DateField(blank=True, null=True)),
                ('daily_study_hours', models.DecimalField(decimal_places=1, max_digits=3, validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(12.0)])),
                ('study_days_per_week', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(7)])),
                ('plan_data', models.JSONField(default=dict, help_text='AI-generated plan structure with tasks and schedules')),
                ('total_tasks', models.PositiveIntegerField(default=0)),
                ('completed_tasks', models.PositiveIntegerField(default=0)),
                ('generated_at', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='study_plans', to='courses.course')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='study_plans', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'study_plans',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StudyGoal',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('goal_type', models.CharField(choices=[('daily', 'Daily Goal'), ('weekly', 'Weekly Goal'), ('monthly', 'Monthly Goal'), ('milestone', 'Milestone Goal'), ('exam', 'Exam Goal')], max_length=20)),
                ('status', models.CharField(choices=[('active', 'Active'), ('completed', 'Completed'), ('paused', 'Paused'), ('cancelled', 'Cancelled')], default='active', max_length=20)),
                ('target_value', models.DecimalField(decimal_places=2, max_digits=10)),
                ('current_value', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('unit', models.CharField(help_text='minutes, pages, flashcards, etc.', max_length=50)),
                ('start_date', models.DateField()),
                ('target_date', models.DateField()),
                ('completed_date', models.DateField(blank=True, null=True)),
                ('is_ai_suggested', models.BooleanField(default=False)),
                ('ai_rationale', models.TextField(blank=True, help_text='AI explanation for suggested goal')),
                ('streak_count', models.PositiveIntegerField(default=0)),
                ('best_streak', models.PositiveIntegerField(default=0)),
                ('last_progress_date', models.DateField(blank=True, null=True)),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='learning_goals', to='courses.course')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='study_goals', to=settings.AUTH_USER_MODEL)),
                ('study_plan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='goals', to='learning.studyplan')),
            ],
            options={
                'db_table': 'study_goals',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StudyRecommendation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('recommendation_type', models.CharField(choices=[('study_plan', 'Study Plan Recommendation'), ('session_schedule', 'Session Schedule Recommendation'), ('material_priority', 'Material Priority Recommendation'), ('review_timing', 'Review Timing Recommendation'), ('goal_adjustment', 'Goal Adjustment Recommendation')], max_length=30)),
                ('priority', models.CharField(choices=[('low', 'Low Priority'), ('medium', 'Medium Priority'), ('high', 'High Priority'), ('urgent', 'Urgent')], max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('dismissed', 'Dismissed'), ('expired', 'Expired')], default='pending', max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('rationale', models.TextField(help_text='AI explanation for this recommendation')),
                ('recommendation_data', models.JSONField(default=dict, help_text='Structured data for the recommendation')),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('accepted_at', models.DateTimeField(blank=True, null=True)),
                ('dismissed_at', models.DateTimeField(blank=True, null=True)),
                ('user_feedback', models.TextField(blank=True)),
                ('effectiveness_rating', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='study_recommendations', to='courses.course')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='study_recommendations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'study_recommendations',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StudySession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('session_type', models.CharField(choices=[('planned', 'Planned Session'), ('spontaneous', 'Spontaneous Study'), ('review', 'Review Session'), ('practice', 'Practice Session')], max_length=20)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('skipped', 'Skipped'), ('cancelled', 'Cancelled')], default='scheduled', max_length=20)),
                ('scheduled_start', models.DateTimeField()),
                ('scheduled_end', models.DateTimeField()),
                ('actual_start', models.DateTimeField(blank=True, null=True)),
                ('actual_end', models.DateTimeField(blank=True, null=True)),
                ('topics', models.JSONField(default=list, help_text='List of topics to cover in this session')),
                ('materials', models.JSONField(default=list, help_text='List of materials/documents for this session')),
                ('completion_notes', models.TextField(blank=True)),
                ('satisfaction_rating', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('productivity_rating', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('objectives_completed', models.PositiveIntegerField(default=0)),
                ('total_objectives', models.PositiveIntegerField(default=0)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='study_sessions', to='courses.course')),
                ('study_plan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='learning.studyplan')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='study_sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'study_sessions',
                'ordering': ['-scheduled_start'],
            },
        ),
        migrations.CreateModel(
            name='LearningProgress',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('progress_type', models.CharField(choices=[('course', 'Course Progress'), ('topic', 'Topic Progress'), ('skill', 'Skill Progress'), ('objective', 'Learning Objective Progress')], max_length=20)),
                ('identifier', models.CharField(help_text='Topic name, skill identifier, etc.', max_length=200)),
                ('completion_percentage', models.DecimalField(decimal_places=2, default=0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('mastery_level', models.PositiveSmallIntegerField(default=1, help_text='1=Beginner, 2=Basic, 3=Intermediate, 4=Advanced, 5=Expert', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('confidence_score', models.DecimalField(decimal_places=2, default=0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('total_study_time', models.DurationField(default=datetime.timedelta)),
                ('last_studied', models.DateTimeField(blank=True, null=True)),
                ('quiz_average', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('flashcard_retention', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('metadata', models.JSONField(default=dict, help_text='Additional progress data and analytics')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='learning_progress', to='courses.course')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='learning_progress', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'learning_progress',
                'ordering': ['-updated_at'],
                'indexes': [models.Index(fields=['user', 'course'], name='learning_pr_user_id_07299c_idx'), models.Index(fields=['progress_type'], name='learning_pr_progres_64fef2_idx'), models.Index(fields=['completion_percentage'], name='learning_pr_complet_83d0e4_idx'), models.Index(fields=['mastery_level'], name='learning_pr_mastery_052346_idx')],
                'unique_together': {('user', 'course', 'progress_type', 'identifier')},
            },
        ),
        migrations.AddIndex(
            model_name='studyplan',
            index=models.Index(fields=['user', 'course'], name='study_plans_user_id_8f0092_idx'),
        ),
        migrations.AddIndex(
            model_name='studyplan',
            index=models.Index(fields=['status'], name='study_plans_status_ddde79_idx'),
        ),
        migrations.AddIndex(
            model_name='studyplan',
            index=models.Index(fields=['start_date', 'end_date'], name='study_plans_start_d_c0bc0f_idx'),
        ),
        migrations.AddIndex(
            model_name='studygoal',
            index=models.Index(fields=['user', 'course'], name='study_goals_user_id_22d871_idx'),
        ),
        migrations.AddIndex(
            model_name='studygoal',
            index=models.Index(fields=['status'], name='study_goals_status_0932df_idx'),
        ),
        migrations.AddIndex(
            model_name='studygoal',
            index=models.Index(fields=['goal_type'], name='study_goals_goal_ty_e22197_idx'),
        ),
        migrations.AddIndex(
            model_name='studygoal',
            index=models.Index(fields=['target_date'], name='study_goals_target__7b6122_idx'),
        ),
        migrations.AddIndex(
            model_name='studyrecommendation',
            index=models.Index(fields=['user', 'course'], name='study_recom_user_id_ee3ff3_idx'),
        ),
        migrations.AddIndex(
            model_name='studyrecommendation',
            index=models.Index(fields=['status', 'priority'], name='study_recom_status_043bf5_idx'),
        ),
        migrations.AddIndex(
            model_name='studyrecommendation',
            index=models.Index(fields=['recommendation_type'], name='study_recom_recomme_cd70ab_idx'),
        ),
        migrations.AddIndex(
            model_name='studyrecommendation',
            index=models.Index(fields=['expires_at'], name='study_recom_expires_34c4f8_idx'),
        ),
        migrations.AddIndex(
            model_name='studysession',
            index=models.Index(fields=['user', 'course'], name='study_sessi_user_id_0617ed_idx'),
        ),
        migrations.AddIndex(
            model_name='studysession',
            index=models.Index(fields=['status'], name='study_sessi_status_82ad92_idx'),
        ),
        migrations.AddIndex(
            model_name='studysession',
            index=models.Index(fields=['scheduled_start'], name='study_sessi_schedul_9e1980_idx'),
        ),
        migrations.AddIndex(
            model_name='studysession',
            index=models.Index(fields=['study_plan'], name='study_sessi_study_p_d05380_idx'),
        ),
    ]
