# Generated by Django 5.1.11 on 2025-07-18 18:35

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('courses', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Flashcard',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('question', models.TextField(help_text='Front side of the flashcard')),
                ('answer', models.TextField(help_text='Back side of the flashcard')),
                ('explanation', models.TextField(blank=True, help_text='Additional explanation', null=True)),
                ('difficulty_level', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], default='medium', max_length=10)),
                ('tags', models.JSONField(default=list, help_text='Tags for categorization')),
                ('source_content', models.TextField(blank=True, help_text='Source text used to generate this flashcard', null=True)),
                ('ease_factor', models.FloatField(default=2.5, help_text='Ease factor for spaced repetition algorithm', validators=[django.core.validators.MinValueValidator(1.3), django.core.validators.MaxValueValidator(5.0)])),
                ('interval_days', models.PositiveIntegerField(default=1, help_text='Current interval in days')),
                ('repetitions', models.PositiveIntegerField(default=0, help_text='Number of successful repetitions')),
                ('next_review_date', models.DateTimeField(default=django.utils.timezone.now, help_text='Next scheduled review date')),
                ('total_reviews', models.PositiveIntegerField(default=0)),
                ('total_correct', models.PositiveIntegerField(default=0)),
                ('success_rate', models.FloatField(default=0.0, help_text='Success rate (0.0 to 1.0)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('is_active', models.BooleanField(default=True)),
                ('is_starred', models.BooleanField(default=False)),
                ('generated_by_ai', models.BooleanField(default=True)),
                ('ai_model_used', models.CharField(blank=True, max_length=100, null=True)),
                ('generation_confidence', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='flashcards', to='courses.course')),
                ('section', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='flashcards', to='courses.coursesection')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='flashcards', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'flashcards',
                'ordering': ['next_review_date'],
            },
        ),
        migrations.CreateModel(
            name='FlashcardReview',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('quality_response', models.PositiveSmallIntegerField(choices=[(0, 'Complete blackout'), (1, 'Incorrect but remembered'), (2, 'Incorrect but easy'), (3, 'Correct with difficulty'), (4, 'Correct with hesitation'), (5, 'Perfect recall')], help_text='Quality of recall (0-5)')),
                ('response_time_seconds', models.PositiveIntegerField(blank=True, help_text='Time taken to respond in seconds', null=True)),
                ('study_session_id', models.UUIDField(blank=True, null=True)),
                ('device_type', models.CharField(blank=True, max_length=20, null=True)),
                ('previous_interval_days', models.PositiveIntegerField(blank=True, null=True)),
                ('new_interval_days', models.PositiveIntegerField(blank=True, null=True)),
                ('ease_factor_before', models.FloatField(blank=True, null=True)),
                ('ease_factor_after', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('flashcard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='assessments.flashcard')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='flashcard_reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'flashcard_reviews',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('quiz_type', models.CharField(choices=[('practice', 'Practice Quiz'), ('assessment', 'Assessment Quiz'), ('review', 'Review Quiz'), ('diagnostic', 'Diagnostic Quiz')], default='practice', max_length=20)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('archived', 'Archived')], default='draft', max_length=20)),
                ('time_limit_minutes', models.PositiveIntegerField(blank=True, null=True)),
                ('max_attempts', models.PositiveIntegerField(default=3)),
                ('passing_score', models.PositiveIntegerField(default=70, help_text='Passing score percentage', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('shuffle_questions', models.BooleanField(default=True)),
                ('show_correct_answers', models.BooleanField(default=True)),
                ('show_explanations', models.BooleanField(default=True)),
                ('allow_retakes', models.BooleanField(default=True)),
                ('generated_by_ai', models.BooleanField(default=True)),
                ('ai_model_used', models.CharField(blank=True, max_length=100, null=True)),
                ('generation_prompt', models.TextField(blank=True, null=True)),
                ('source_content', models.TextField(blank=True, null=True)),
                ('total_questions', models.PositiveIntegerField(default=0)),
                ('total_attempts', models.PositiveIntegerField(default=0)),
                ('average_score', models.FloatField(default=0.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quizzes', to='courses.course')),
                ('section', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='quizzes', to='courses.coursesection')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quizzes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'quizzes',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='QuizAttempt',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('in_progress', 'In Progress'), ('completed', 'Completed'), ('abandoned', 'Abandoned'), ('timed_out', 'Timed Out')], default='in_progress', max_length=20)),
                ('attempt_number', models.PositiveIntegerField(default=1)),
                ('score', models.FloatField(blank=True, null=True)),
                ('max_score', models.FloatField(blank=True, null=True)),
                ('percentage_score', models.FloatField(blank=True, null=True)),
                ('passed', models.BooleanField(blank=True, null=True)),
                ('time_taken_seconds', models.PositiveIntegerField(blank=True, null=True)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('questions_order', models.JSONField(default=list, help_text='Order of questions for this attempt')),
                ('device_type', models.CharField(blank=True, max_length=20, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attempts', to='assessments.quiz')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quiz_attempts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'quiz_attempts',
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='QuizQuestion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('question_text', models.TextField()),
                ('question_type', models.CharField(choices=[('multiple_choice', 'Multiple Choice'), ('true_false', 'True/False'), ('short_answer', 'Short Answer'), ('essay', 'Essay'), ('fill_blank', 'Fill in the Blank')], max_length=20)),
                ('difficulty_level', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], default='medium', max_length=10)),
                ('order', models.PositiveIntegerField(default=0)),
                ('points', models.PositiveIntegerField(default=1)),
                ('answer_options', models.JSONField(default=list, help_text='List of answer options for multiple choice questions')),
                ('correct_answers', models.JSONField(default=list, help_text='List of correct answers (indices for MC, text for others)')),
                ('explanation', models.TextField(blank=True, null=True)),
                ('hint', models.TextField(blank=True, null=True)),
                ('tags', models.JSONField(default=list)),
                ('source_content', models.TextField(blank=True, null=True)),
                ('total_attempts', models.PositiveIntegerField(default=0)),
                ('correct_attempts', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='assessments.quiz')),
            ],
            options={
                'db_table': 'quiz_questions',
                'ordering': ['quiz', 'order'],
            },
        ),
        migrations.CreateModel(
            name='QuizResponse',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('user_answer', models.JSONField(help_text="User's answer (format depends on question type)")),
                ('is_correct', models.BooleanField(blank=True, null=True)),
                ('points_earned', models.FloatField(default=0.0)),
                ('time_taken_seconds', models.PositiveIntegerField(blank=True, null=True)),
                ('answered_at', models.DateTimeField(auto_now_add=True)),
                ('flagged_for_review', models.BooleanField(default=False)),
                ('attempt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='assessments.quizattempt')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='assessments.quizquestion')),
            ],
            options={
                'db_table': 'quiz_responses',
            },
        ),
        migrations.CreateModel(
            name='StudyStreak',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('streak_type', models.CharField(choices=[('flashcard', 'Flashcard Streak'), ('quiz', 'Quiz Streak'), ('assessment', 'Assessment Streak'), ('overall', 'Overall Study Streak')], max_length=20)),
                ('current_streak', models.PositiveIntegerField(default=0)),
                ('longest_streak', models.PositiveIntegerField(default=0)),
                ('streak_start_date', models.DateField(blank=True, null=True)),
                ('last_activity_date', models.DateField(blank=True, null=True)),
                ('milestones_achieved', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='study_streaks', to='courses.course')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='study_streaks', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'study_streaks',
            },
        ),
        migrations.CreateModel(
            name='Assessment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('assessment_type', models.CharField(choices=[('diagnostic', 'Diagnostic Assessment'), ('formative', 'Formative Assessment'), ('summative', 'Summative Assessment'), ('self_assessment', 'Self Assessment')], max_length=20)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('archived', 'Archived')], default='draft', max_length=20)),
                ('include_flashcards', models.BooleanField(default=True)),
                ('include_quizzes', models.BooleanField(default=True)),
                ('flashcard_count', models.PositiveIntegerField(default=10)),
                ('quiz_count', models.PositiveIntegerField(default=1)),
                ('adaptive_difficulty', models.BooleanField(default=True)),
                ('target_success_rate', models.FloatField(default=0.8, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('due_date', models.DateTimeField(blank=True, null=True)),
                ('estimated_duration_minutes', models.PositiveIntegerField(blank=True, null=True)),
                ('completion_rate', models.FloatField(default=0.0)),
                ('average_performance', models.FloatField(default=0.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assessments', to='courses.course')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assessments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'assessments',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', 'course'], name='assessments_user_id_da214a_idx'), models.Index(fields=['assessment_type', 'status'], name='assessments_assessm_d38622_idx'), models.Index(fields=['due_date'], name='assessments_due_dat_796263_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='flashcard',
            index=models.Index(fields=['user', 'course'], name='flashcards_user_id_80fff9_idx'),
        ),
        migrations.AddIndex(
            model_name='flashcard',
            index=models.Index(fields=['next_review_date', 'is_active'], name='flashcards_next_re_59b71d_idx'),
        ),
        migrations.AddIndex(
            model_name='flashcard',
            index=models.Index(fields=['difficulty_level'], name='flashcards_difficu_135d88_idx'),
        ),
        migrations.AddIndex(
            model_name='flashcard',
            index=models.Index(fields=['is_starred'], name='flashcards_is_star_eb7e41_idx'),
        ),
        migrations.AddIndex(
            model_name='flashcardreview',
            index=models.Index(fields=['flashcard', 'created_at'], name='flashcard_r_flashca_849075_idx'),
        ),
        migrations.AddIndex(
            model_name='flashcardreview',
            index=models.Index(fields=['user', 'created_at'], name='flashcard_r_user_id_4d7d65_idx'),
        ),
        migrations.AddIndex(
            model_name='flashcardreview',
            index=models.Index(fields=['study_session_id'], name='flashcard_r_study_s_a3a896_idx'),
        ),
        migrations.AddIndex(
            model_name='quiz',
            index=models.Index(fields=['user', 'course'], name='quizzes_user_id_b417b4_idx'),
        ),
        migrations.AddIndex(
            model_name='quiz',
            index=models.Index(fields=['quiz_type', 'status'], name='quizzes_quiz_ty_6619d5_idx'),
        ),
        migrations.AddIndex(
            model_name='quiz',
            index=models.Index(fields=['created_at'], name='quizzes_created_1b431a_idx'),
        ),
        migrations.AddIndex(
            model_name='quizattempt',
            index=models.Index(fields=['quiz', 'user'], name='quiz_attemp_quiz_id_69857c_idx'),
        ),
        migrations.AddIndex(
            model_name='quizattempt',
            index=models.Index(fields=['status'], name='quiz_attemp_status_02023c_idx'),
        ),
        migrations.AddIndex(
            model_name='quizattempt',
            index=models.Index(fields=['started_at'], name='quiz_attemp_started_8d6002_idx'),
        ),
        migrations.AddIndex(
            model_name='quizquestion',
            index=models.Index(fields=['quiz', 'order'], name='quiz_questi_quiz_id_76bc24_idx'),
        ),
        migrations.AddIndex(
            model_name='quizquestion',
            index=models.Index(fields=['question_type', 'difficulty_level'], name='quiz_questi_questio_982475_idx'),
        ),
        migrations.AddIndex(
            model_name='quizresponse',
            index=models.Index(fields=['attempt', 'question'], name='quiz_respon_attempt_122630_idx'),
        ),
        migrations.AddIndex(
            model_name='quizresponse',
            index=models.Index(fields=['is_correct'], name='quiz_respon_is_corr_a23aab_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='quizresponse',
            unique_together={('attempt', 'question')},
        ),
        migrations.AddIndex(
            model_name='studystreak',
            index=models.Index(fields=['user', 'streak_type'], name='study_strea_user_id_6a177c_idx'),
        ),
        migrations.AddIndex(
            model_name='studystreak',
            index=models.Index(fields=['current_streak'], name='study_strea_current_99be10_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='studystreak',
            unique_together={('user', 'course', 'streak_type')},
        ),
    ]
