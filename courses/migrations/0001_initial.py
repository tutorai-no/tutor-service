# Generated by Django 5.1.11 on 2025-07-19 11:23

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('university', models.CharField(blank=True, max_length=200, null=True)),
                ('course_code', models.CharField(blank=True, help_text='e.g., CS101, MATH201', max_length=50, null=True)),
                ('semester', models.CharField(blank=True, help_text='e.g., Fall 2024, Spring 2025', max_length=50, null=True)),
                ('academic_year', models.CharField(blank=True, help_text='e.g., 2024-2025', max_length=10, null=True)),
                ('credits', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('language', models.CharField(choices=[('en', 'English'), ('no', 'Norwegian'), ('sv', 'Swedish'), ('da', 'Danish')], default='en', max_length=10)),
                ('subject_area', models.CharField(blank=True, help_text='e.g., Computer Science, Mathematics, Biology', max_length=100, null=True)),
                ('difficulty_level', models.PositiveSmallIntegerField(default=3, help_text='1=Beginner, 5=Advanced', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('color', models.CharField(default='#3B82F6', help_text='Hex color for UI representation', max_length=7)),
                ('icon', models.CharField(blank=True, help_text='Icon name for UI representation', max_length=50, null=True)),
                ('study_goals', models.JSONField(default=list, help_text='List of learning objectives')),
                ('preferred_study_methods', models.JSONField(default=list, help_text='Preferred learning tools (flashcards, quizzes, etc.)')),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('exam_date', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_archived', models.BooleanField(default=False)),
                ('is_favorite', models.BooleanField(default=False)),
                ('total_documents', models.PositiveIntegerField(default=0)),
                ('total_study_hours', models.PositiveIntegerField(default=0, help_text='Minutes')),
                ('completion_percentage', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'courses',
                'ordering': ['-is_favorite', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Chat',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('is_pinned', models.BooleanField(default=False)),
                ('is_archived', models.BooleanField(default=False)),
                ('message_count', models.PositiveIntegerField(default=0)),
                ('total_tokens_used', models.PositiveIntegerField(default=0)),
                ('average_response_time_ms', models.PositiveIntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chats', to=settings.AUTH_USER_MODEL)),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='chats', to='courses.course')),
            ],
            options={
                'db_table': 'chats',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='CourseSection',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('order', models.PositiveIntegerField(help_text='Display order within course')),
                ('chapter_number', models.PositiveIntegerField(blank=True, null=True)),
                ('page_range_start', models.PositiveIntegerField(blank=True, null=True)),
                ('page_range_end', models.PositiveIntegerField(blank=True, null=True)),
                ('learning_objectives', models.JSONField(default=list, help_text='List of learning objectives for this section')),
                ('key_concepts', models.JSONField(default=list, help_text='Key concepts covered in this section')),
                ('is_completed', models.BooleanField(default=False)),
                ('completion_percentage', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('estimated_study_time', models.PositiveIntegerField(default=60, help_text='Estimated study time in minutes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sections', to='courses.course')),
            ],
            options={
                'db_table': 'course_sections',
                'ordering': ['course', 'order'],
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('document_type', models.CharField(choices=[('file', 'File Upload'), ('url', 'URL/Link'), ('video', 'Video'), ('text', 'Text Input'), ('audio', 'Audio File')], max_length=10)),
                ('file_url', models.URLField(blank=True, max_length=1024)),
                ('file_size_bytes', models.BigIntegerField(blank=True, null=True)),
                ('content_type', models.CharField(blank=True, max_length=100)),
                ('original_filename', models.CharField(blank=True, max_length=255)),
                ('source_url', models.URLField(blank=True, max_length=1024)),
                ('thumbnail_url', models.URLField(blank=True, max_length=1024)),
                ('duration_seconds', models.PositiveIntegerField(blank=True, null=True)),
                ('page_count', models.PositiveIntegerField(blank=True, null=True)),
                ('word_count', models.PositiveIntegerField(blank=True, null=True)),
                ('language', models.CharField(blank=True, max_length=10)),
                ('processing_status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('processing_error', models.TextField(blank=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('storage_path', models.CharField(blank=True, help_text='Path in cloud storage', max_length=1024)),
                ('extracted_text', models.TextField(blank=True)),
                ('summary', models.TextField(blank=True)),
                ('topics', models.JSONField(default=list, help_text='Automatically extracted topics')),
                ('view_count', models.PositiveIntegerField(default=0)),
                ('last_accessed_at', models.DateTimeField(blank=True, null=True)),
                ('is_favorite', models.BooleanField(default=False)),
                ('is_archived', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='courses.course')),
                ('section', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='documents', to='courses.coursesection')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'documents',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('user', 'User'), ('assistant', 'AI Assistant'), ('system', 'System')], max_length=10)),
                ('content', models.TextField()),
                ('token_count', models.PositiveIntegerField(blank=True, null=True)),
                ('processing_time_ms', models.PositiveIntegerField(blank=True, null=True)),
                ('model_used', models.CharField(blank=True, max_length=50)),
                ('temperature', models.FloatField(blank=True, null=True)),
                ('context_used', models.TextField(blank=True, help_text='Context that was provided to the AI')),
                ('is_helpful', models.BooleanField(blank=True, null=True)),
                ('user_rating', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('chat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='courses.chat')),
                ('referenced_documents', models.ManyToManyField(blank=True, related_name='chat_references', to='courses.document')),
            ],
            options={
                'db_table': 'chat_messages',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='DocumentTag',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('color', models.CharField(default='#6B7280', help_text='Hex color for tag display', max_length=7)),
                ('description', models.TextField(blank=True, null=True)),
                ('usage_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='document_tags', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'document_tags',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='DocumentTagAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tag_assignments', to='courses.document')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='document_assignments', to='courses.documenttag')),
            ],
            options={
                'db_table': 'document_tag_assignments',
            },
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['user', 'is_active'], name='courses_user_id_9960fe_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['course_code'], name='courses_course__5da9ef_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['subject_area'], name='courses_subject_274eac_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['exam_date'], name='courses_exam_da_da4886_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['created_at'], name='courses_created_0aa93c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='course',
            unique_together={('user', 'name', 'semester')},
        ),
        migrations.AddIndex(
            model_name='chat',
            index=models.Index(fields=['user', 'course'], name='chats_user_id_e67e42_idx'),
        ),
        migrations.AddIndex(
            model_name='chat',
            index=models.Index(fields=['is_pinned', 'is_archived'], name='chats_is_pinn_4e65b7_idx'),
        ),
        migrations.AddIndex(
            model_name='chat',
            index=models.Index(fields=['updated_at'], name='chats_updated_9a6675_idx'),
        ),
        migrations.AddIndex(
            model_name='coursesection',
            index=models.Index(fields=['course', 'order'], name='course_sect_course__be0a09_idx'),
        ),
        migrations.AddIndex(
            model_name='coursesection',
            index=models.Index(fields=['is_completed'], name='course_sect_is_comp_6e287d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='coursesection',
            unique_together={('course', 'order')},
        ),
        migrations.AddIndex(
            model_name='document',
            index=models.Index(fields=['user', 'course'], name='documents_user_id_633ff5_idx'),
        ),
        migrations.AddIndex(
            model_name='document',
            index=models.Index(fields=['processing_status'], name='documents_process_e1e618_idx'),
        ),
        migrations.AddIndex(
            model_name='document',
            index=models.Index(fields=['document_type'], name='documents_documen_fc21d0_idx'),
        ),
        migrations.AddIndex(
            model_name='document',
            index=models.Index(fields=['created_at'], name='documents_created_3c6eaa_idx'),
        ),
        migrations.AddIndex(
            model_name='document',
            index=models.Index(fields=['is_favorite', 'is_archived'], name='documents_is_favo_573fb1_idx'),
        ),
        migrations.AddIndex(
            model_name='chatmessage',
            index=models.Index(fields=['chat', 'created_at'], name='chat_messag_chat_id_012ed9_idx'),
        ),
        migrations.AddIndex(
            model_name='chatmessage',
            index=models.Index(fields=['role'], name='chat_messag_role_ddd811_idx'),
        ),
        migrations.AddIndex(
            model_name='chatmessage',
            index=models.Index(fields=['is_helpful'], name='chat_messag_is_help_8e5ecc_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='documenttag',
            unique_together={('user', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='documenttagassignment',
            unique_together={('document', 'tag')},
        ),
    ]
