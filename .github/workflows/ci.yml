name: CI

on:
  push:
    branches: ["main", "refactor/project-structure"]
  pull_request:
    branches: ["main"]

env:
  PROJECT_ID: production-466308
  REGION: europe-west1
  REPOSITORY: aksio-prod-registry
  SERVICE: aksio-backend

permissions:
  pull-requests: write
  contents: write
  id-token: write  # Required for Workload Identity Federation
  
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
    steps:
      - uses: actions/checkout@v4
      
      - name: Build docker image and run tests
        run: |
          # Build the Docker image first (pointing to correct Dockerfile)
          docker build -f config/docker/Dockerfile -t aksio-backend-test .
          
          # Use the minimal CI docker-compose configuration
          docker compose -f docker-compose.ci.yml down -v
          docker compose -f docker-compose.ci.yml build
          
          # Start services
          docker compose -f docker-compose.ci.yml up -d db
          
          # Wait for services to be ready
          echo "Waiting for PostgreSQL to be ready..."
          timeout 60 bash -c 'until docker compose -f docker-compose.ci.yml exec -T db pg_isready -U aksio_user -d aksio_db; do sleep 2; done'
          
          # Run migrations
          docker compose -f docker-compose.ci.yml run --rm backend python manage.py migrate
          
          # Run tests
          docker compose -f docker-compose.ci.yml run --rm backend python manage.py test
          
          # Clean up
          docker compose -f docker-compose.ci.yml down -v

  push-image:
    name: Build and Push Docker Image to Artifact Registry
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write  # Required for Workload Identity Federation
      
    # Only runs if CI was successful and on specified branches
    needs: [build]
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/refactor/project-structure') && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${REGION}-docker.pkg.dev --quiet

      - name: Build and Push Docker image
        run: |
          IMAGE_TAG="${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${SERVICE}:${GITHUB_SHA}"
          IMAGE_LATEST="${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${SERVICE}:latest"
          
          # Build the production image (using the correct Dockerfile path)
          docker build -f config/docker/Dockerfile.prod -t ${IMAGE_TAG} -t ${IMAGE_LATEST} .
          
          # Push both tags
          docker push ${IMAGE_TAG}
          docker push ${IMAGE_LATEST}
          
          echo "âœ… Successfully pushed Docker images:"
          echo "  - ${IMAGE_TAG}"
          echo "  - ${IMAGE_LATEST}"
          
  dependabot:
    name: 'Dependabot'
    needs: [build] 
    runs-on: ubuntu-latest
    if: ${{ github.actor == 'dependabot[bot]' && github.event_name == 'pull_request'}} 
    steps:
      - name: Enable auto-merge for Dependabot PRs
        run: gh pr merge --auto --merge "$PR_URL" 
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}