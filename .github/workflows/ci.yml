name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  pull-requests: write
  contents: write
  
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
    steps:
      - uses: actions/checkout@v4
      - name: Build docker image and run tests
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          MONGODB_DATABASE: ${{ secrets.MONGODB_DATABASE }}
          MONGODB_COLLECTION: ${{ secrets.MONGODB_COLLECTION }}
          RAG_DATABASE_SYSTEM: ${{ secrets.RAG_DATABASE_SYSTEM }}
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          AZURE_STORAGE_CONNECTION_STRING: ${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}
          AZURE_STORAGE_CONTAINER_NAME: ${{ secrets.AZURE_STORAGE_CONTAINER_NAME }}
        run: |
          docker network create tutorai_network
          docker compose down -v
          docker compose build backend
          docker compose run backend python manage.py makemigrations accounts
          docker compose run backend python manage.py makemigrations learning_materials
          docker compose run backend python manage.py makemigrations
          docker compose run backend python manage.py migrate
          docker compose run backend python manage.py test --parallel
          docker compose up -d backend
          docker compose down

  push-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      
    # Only runs if CI was successful
    needs: [build]
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine Environment Tag
        id: env_tag
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "tag=latest-prod" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "tag=latest-staging" >> $GITHUB_OUTPUT
          else
            echo "tag=latest-dev" >> $GITHUB_OUTPUT
          fi

      - name: Build and Push Docker image
        run: |
          docker build -t ghcr.io/the-tutorai-project/tutor-service:${{ steps.env_tag.outputs.tag }} ./src/
          docker push ghcr.io/the-tutorai-project/tutor-service:${{ steps.env_tag.outputs.tag }}
          
  dependabot:
    name: 'Dependabot'
    # After the E2E and build jobs, if one of them fails, it won't merge the PR.
    needs: [build] 
    runs-on: ubuntu-latest
    # Detect that the PR author is dependabot
    if: ${{ github.actor == 'dependabot[bot]' && github.event_name == 'pull_request'}} 
    steps:
      - name: Enable auto-merge for Dependabot PRs
        # Use Github CLI to merge automatically the PR
        run: gh pr merge --auto --merge "$PR_URL" 
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
