name: Continuous Deployment

on:
  workflow_run:
    workflows: ["CI"]
    branches: ["main", "refactor/project-structure"]
    types:
      - completed
  workflow_dispatch: {}

env:
  PROJECT_ID: production-466308
  REGION: europe-west1
  REPOSITORY: aksio-prod-registry
  SERVICE: aksio-backend
  CLOUD_SQL_CONNECTION_NAME: ${{ secrets.CLOUD_SQL_CONNECTION_NAME }}

permissions:
  contents: read
  id-token: write  # Required for Workload Identity Federation

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${REGION}-docker.pkg.dev

      - name: Run Database Migrations
        run: |
          # Pull the latest image
          IMAGE="${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${SERVICE}:latest"
          echo "üì¶ Pulling latest image: ${IMAGE}"
          docker pull ${IMAGE}
          
          # Start Cloud SQL Proxy in the background
          echo "üîå Starting Cloud SQL Proxy..."
          docker run -d \
            --name cloud-sql-proxy \
            --network host \
            gcr.io/cloud-sql-connectors/cloud-sql-proxy:latest \
            --address 127.0.0.1 \
            --port 5432 \
            ${CLOUD_SQL_CONNECTION_NAME}
          
          # Wait for proxy to be ready
          echo "‚è≥ Waiting for Cloud SQL Proxy to be ready..."
          sleep 10
          
          # Run migrations
          echo "üîÑ Running database migrations..."
          docker run --rm \
            -e DATABASE_HOST="127.0.0.1" \
            -e DATABASE_PORT="5432" \
            -e DATABASE_NAME="${{ secrets.DATABASE_NAME }}" \
            -e DATABASE_USER="${{ secrets.DATABASE_USER }}" \
            -e DATABASE_PASSWORD="${{ secrets.DATABASE_PASSWORD }}" \
            -e DJANGO_SECRET_KEY="${{ secrets.DJANGO_SECRET_KEY }}" \
            -e DJANGO_SETTINGS_MODULE="aksio.settings.production" \
            --network host \
            ${IMAGE} python manage.py migrate
          
          MIGRATE_EXIT_CODE=$?
          
          # Create cache table if it doesn't exist
          echo "üìä Creating cache table..."
          docker run --rm \
            -e DATABASE_HOST="127.0.0.1" \
            -e DATABASE_PORT="5432" \
            -e DATABASE_NAME="${{ secrets.DATABASE_NAME }}" \
            -e DATABASE_USER="${{ secrets.DATABASE_USER }}" \
            -e DATABASE_PASSWORD="${{ secrets.DATABASE_PASSWORD }}" \
            -e DJANGO_SECRET_KEY="${{ secrets.DJANGO_SECRET_KEY }}" \
            -e DJANGO_SETTINGS_MODULE="aksio.settings.production" \
            --network host \
            ${IMAGE} python manage.py createcachetable || true
          
          # Clean up proxy
          docker stop cloud-sql-proxy
          docker rm cloud-sql-proxy
          
          if [ $MIGRATE_EXIT_CODE -ne 0 ]; then
            echo "‚ùå Migration failed with exit code: $MIGRATE_EXIT_CODE"
            exit $MIGRATE_EXIT_CODE
          fi
          
          echo "‚úÖ Migrations completed successfully"

      - name: Deploy to Cloud Run
        run: |
          echo "üöÄ Deploying to Cloud Run..."
          gcloud run deploy ${SERVICE} \
            --image ${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${SERVICE}:latest \
            --platform managed \
            --region ${REGION} \
            --allow-unauthenticated \
            --add-cloudsql-instances ${CLOUD_SQL_CONNECTION_NAME} \
            --set-env-vars "DJANGO_SETTINGS_MODULE=aksio.settings.production" \
            --set-env-vars "DATABASE_HOST=/cloudsql/${CLOUD_SQL_CONNECTION_NAME}" \
            --set-env-vars "DATABASE_PORT=5432" \
            --set-env-vars "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" \
            --set-env-vars "DATABASE_USER=${{ secrets.DATABASE_USER }}" \
            --set-env-vars "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" \
            --set-env-vars "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" \
            --set-env-vars "DJANGO_ALLOWED_HOSTS=*.run.app,aksio.app,www.aksio.app,api.aksio.app,backend.aksio.app" \
            --set-env-vars "GOOGLE_CLOUD_PROJECT=${PROJECT_ID}" \
            --set-env-vars "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" \
            --set-env-vars "EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}" \
            --set-env-vars "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" \
            --set-env-vars "DEFAULT_FROM_EMAIL=${{ secrets.DEFAULT_FROM_EMAIL }}" \
            --cpu 1 \
            --memory 512Mi \
            --min-instances 0 \
            --max-instances 5 \
            --timeout 300 \
            --port 8080 \
            --service-account ${{ secrets.CLOUD_RUN_SERVICE_ACCOUNT }}
          
          echo "‚úÖ Deployment completed"

      - name: Get Service URL
        run: |
          SERVICE_URL=$(gcloud run services describe ${SERVICE} \
            --platform managed \
            --region ${REGION} \
            --format 'value(status.url)')
          echo "üåê Service deployed to: ${SERVICE_URL}"
          echo "SERVICE_URL=${SERVICE_URL}" >> $GITHUB_ENV

      - name: Smoke Test
        run: |
          # Wait for service to be ready
          echo "‚è≥ Waiting for service to stabilize..."
          sleep 30
          
          # Test health endpoint
          echo "üè• Testing health endpoint..."
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" ${SERVICE_URL}/health/)
          
          if [ $HTTP_CODE -eq 200 ]; then
            echo "‚úÖ Health check passed (HTTP ${HTTP_CODE})"
          else
            echo "‚ùå Health check failed with HTTP code: $HTTP_CODE"
            # Try to get more info
            echo "Response body:"
            curl -s ${SERVICE_URL}/health/
            exit 1
          fi
          
          # Test root endpoint
          echo "üè† Testing root endpoint..."
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" ${SERVICE_URL}/)
          if [ $HTTP_CODE -eq 200 ]; then
            echo "‚úÖ Root endpoint check passed (HTTP ${HTTP_CODE})"
          else
            echo "‚ö†Ô∏è  Root endpoint returned HTTP code: $HTTP_CODE"
          fi
          
      - name: Deployment Summary
        if: success()
        run: |
          echo "üéâ Deployment Summary"
          echo "===================="
          echo "üì¶ Service: ${SERVICE}"
          echo "üåç Region: ${REGION}"
          echo "üîó URL: ${SERVICE_URL}"
          echo "‚úÖ Status: Healthy"
          echo ""
          echo "üìö Available endpoints:"
          echo "  - ${SERVICE_URL}/ (API info)"
          echo "  - ${SERVICE_URL}/health/ (Health check)"
          echo "  - ${SERVICE_URL}/swagger/ (API documentation)"
          echo "  - ${SERVICE_URL}/admin/ (Admin panel)"