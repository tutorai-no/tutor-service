# Generated by Django 5.1.11 on 2025-07-18 18:35

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('assessments', '0001_initial'),
        ('courses', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='TutoringSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('session_type', models.CharField(choices=[('concept_explanation', 'Concept Explanation'), ('problem_solving', 'Problem Solving'), ('exam_preparation', 'Exam Preparation'), ('homework_help', 'Homework Help'), ('study_planning', 'Study Planning'), ('skill_practice', 'Skill Practice'), ('review_session', 'Review Session')], max_length=20)),
                ('status', models.CharField(choices=[('planned', 'Planned'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('paused', 'Paused'), ('cancelled', 'Cancelled')], default='planned', max_length=20)),
                ('learning_objectives', models.JSONField(default=list, help_text='List of learning objectives for this session')),
                ('topics_covered', models.JSONField(default=list, help_text='Topics covered in this session')),
                ('skills_practiced', models.JSONField(default=list, help_text='Skills practiced in this session')),
                ('preferred_learning_style', models.CharField(choices=[('visual', 'Visual'), ('auditory', 'Auditory'), ('kinesthetic', 'Kinesthetic'), ('reading_writing', 'Reading/Writing'), ('mixed', 'Mixed')], default='mixed', max_length=20)),
                ('difficulty_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], default='intermediate', max_length=15)),
                ('tutor_persona', models.CharField(default='helpful_teacher', help_text='AI tutor persona/style', max_length=100)),
                ('teaching_approach', models.CharField(default='socratic', help_text='Teaching approach (socratic, direct, guided_discovery, etc.)', max_length=100)),
                ('planned_start_time', models.DateTimeField(blank=True, null=True)),
                ('planned_duration_minutes', models.PositiveIntegerField(blank=True, null=True)),
                ('actual_start_time', models.DateTimeField(blank=True, null=True)),
                ('actual_end_time', models.DateTimeField(blank=True, null=True)),
                ('objectives_achieved', models.JSONField(default=list, help_text='Learning objectives that were achieved')),
                ('concepts_mastered', models.JSONField(default=list, help_text='Concepts that were mastered')),
                ('areas_for_improvement', models.JSONField(default=list, help_text='Areas identified for improvement')),
                ('user_satisfaction', models.PositiveSmallIntegerField(blank=True, help_text='User satisfaction rating (1-5)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('learning_effectiveness', models.PositiveSmallIntegerField(blank=True, help_text='Learning effectiveness rating (1-5)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('session_notes', models.TextField(blank=True, null=True)),
                ('total_interactions', models.PositiveIntegerField(default=0)),
                ('total_tokens_used', models.PositiveIntegerField(default=0)),
                ('average_response_time_ms', models.PositiveIntegerField(blank=True, null=True)),
                ('next_session_topics', models.JSONField(default=list, help_text='Suggested topics for next session')),
                ('recommended_resources', models.JSONField(default=list, help_text='Recommended study resources')),
                ('homework_assignments', models.JSONField(default=list, help_text='Homework or practice assignments')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tutoring_sessions', to='courses.course')),
                ('section', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tutoring_sessions', to='courses.coursesection')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tutoring_sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'ai_tutoring_sessions',
                'ordering': ['-planned_start_time', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Chat',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='Chat title or topic', max_length=255)),
                ('chat_type', models.CharField(choices=[('general', 'General Chat'), ('course_specific', 'Course-Specific Chat'), ('document_based', 'Document-Based Chat'), ('assessment_help', 'Assessment Help'), ('study_planning', 'Study Planning'), ('concept_explanation', 'Concept Explanation')], default='general', max_length=20)),
                ('status', models.CharField(choices=[('active', 'Active'), ('archived', 'Archived'), ('deleted', 'Deleted')], default='active', max_length=20)),
                ('system_prompt', models.TextField(blank=True, help_text='System prompt for AI behavior', null=True)),
                ('ai_model', models.CharField(default='gpt-4', help_text='AI model used for this chat', max_length=100)),
                ('temperature', models.FloatField(default=0.7, help_text='AI temperature setting', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(2.0)])),
                ('max_tokens', models.PositiveIntegerField(default=1000, help_text='Maximum tokens per response')),
                ('context_window_messages', models.PositiveIntegerField(default=10, help_text='Number of messages to keep in context')),
                ('use_course_context', models.BooleanField(default=True, help_text='Include course materials in context')),
                ('use_document_context', models.BooleanField(default=True, help_text='Include document content in context')),
                ('use_assessment_context', models.BooleanField(default=True, help_text='Include assessment history in context')),
                ('message_count', models.PositiveIntegerField(default=0)),
                ('total_tokens_used', models.PositiveIntegerField(default=0)),
                ('average_response_time_ms', models.PositiveIntegerField(blank=True, null=True)),
                ('is_pinned', models.BooleanField(default=False)),
                ('is_favorite', models.BooleanField(default=False)),
                ('last_active_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(blank=True, help_text='Course context for this chat', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ai_chats', to='courses.course')),
                ('section', models.ForeignKey(blank=True, help_text='Section context for this chat', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ai_chats', to='courses.coursesection')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_chats', to=settings.AUTH_USER_MODEL)),
                ('current_session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='current_chats', to='chat.tutoringsession')),
            ],
            options={
                'db_table': 'ai_chats',
                'ordering': ['-last_active_at', '-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='ChatAnalytics',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('analytics_type', models.CharField(choices=[('daily_summary', 'Daily Summary'), ('weekly_summary', 'Weekly Summary'), ('monthly_summary', 'Monthly Summary'), ('topic_analysis', 'Topic Analysis'), ('learning_progress', 'Learning Progress'), ('engagement_metrics', 'Engagement Metrics')], max_length=20)),
                ('period_start', models.DateTimeField()),
                ('period_end', models.DateTimeField()),
                ('total_chats', models.PositiveIntegerField(default=0)),
                ('total_messages', models.PositiveIntegerField(default=0)),
                ('total_tokens_used', models.PositiveIntegerField(default=0)),
                ('average_response_time_ms', models.PositiveIntegerField(blank=True, null=True)),
                ('active_chat_days', models.PositiveIntegerField(default=0)),
                ('average_messages_per_chat', models.FloatField(default=0.0)),
                ('average_session_duration_minutes', models.FloatField(default=0.0)),
                ('top_topics', models.JSONField(default=list)),
                ('most_helpful_responses', models.JSONField(default=list)),
                ('improvement_areas', models.JSONField(default=list)),
                ('concepts_learned', models.JSONField(default=list)),
                ('skills_developed', models.JSONField(default=list)),
                ('knowledge_gaps', models.JSONField(default=list)),
                ('metrics_data', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat_analytics', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'ai_chat_analytics',
                'ordering': ['-period_end'],
                'indexes': [models.Index(fields=['user', 'analytics_type'], name='ai_chat_ana_user_id_3c484b_idx'), models.Index(fields=['period_start', 'period_end'], name='ai_chat_ana_period__e64c77_idx')],
                'unique_together': {('user', 'analytics_type', 'period_start', 'period_end')},
            },
        ),
        migrations.CreateModel(
            name='ChatContext',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('context_type', models.CharField(choices=[('course_material', 'Course Material'), ('document_content', 'Document Content'), ('assessment_history', 'Assessment History'), ('user_progress', 'User Progress'), ('conversation_history', 'Conversation History'), ('external_knowledge', 'External Knowledge')], max_length=20)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('content', models.TextField()),
                ('content_hash', models.CharField(help_text='Hash of content for deduplication', max_length=64)),
                ('relevance_score', models.FloatField(default=0.0, help_text='Relevance score for this context item', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('is_active', models.BooleanField(default=True, help_text='Whether this context is currently active')),
                ('source_type', models.CharField(blank=True, max_length=50, null=True)),
                ('source_id', models.UUIDField(blank=True, null=True)),
                ('source_metadata', models.JSONField(blank=True, default=dict)),
                ('usage_count', models.PositiveIntegerField(default=0)),
                ('last_used_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('chat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='context_items', to='chat.chat')),
                ('related_assessments', models.ManyToManyField(blank=True, related_name='chat_contexts', to='assessments.flashcard')),
                ('related_documents', models.ManyToManyField(blank=True, related_name='chat_contexts', to='courses.document')),
            ],
            options={
                'db_table': 'ai_chat_contexts',
                'ordering': ['-relevance_score', '-updated_at'],
                'indexes': [models.Index(fields=['chat', 'context_type'], name='ai_chat_con_chat_id_0a25f0_idx'), models.Index(fields=['relevance_score'], name='ai_chat_con_relevan_bfd637_idx'), models.Index(fields=['is_active'], name='ai_chat_con_is_acti_a339d1_idx'), models.Index(fields=['content_hash'], name='ai_chat_con_content_71a959_idx'), models.Index(fields=['last_used_at'], name='ai_chat_con_last_us_6e66cb_idx')],
                'unique_together': {('chat', 'content_hash')},
            },
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('user', 'User'), ('assistant', 'AI Assistant'), ('system', 'System'), ('context', 'Context Information')], max_length=10)),
                ('message_type', models.CharField(choices=[('text', 'Text Message'), ('image', 'Image Message'), ('file', 'File Message'), ('code', 'Code Message'), ('math', 'Math/Formula Message'), ('summary', 'Summary Message'), ('feedback', 'Feedback Message')], default='text', max_length=20)),
                ('content', models.TextField()),
                ('token_count', models.PositiveIntegerField(blank=True, null=True)),
                ('processing_time_ms', models.PositiveIntegerField(blank=True, null=True)),
                ('ai_model_used', models.CharField(blank=True, max_length=100, null=True)),
                ('temperature_used', models.FloatField(blank=True, null=True)),
                ('prompt_tokens', models.PositiveIntegerField(blank=True, null=True)),
                ('completion_tokens', models.PositiveIntegerField(blank=True, null=True)),
                ('context_used', models.TextField(blank=True, help_text='Context information used for AI response', null=True)),
                ('thread_depth', models.PositiveIntegerField(default=0)),
                ('is_helpful', models.BooleanField(blank=True, null=True)),
                ('user_rating', models.PositiveSmallIntegerField(blank=True, help_text='User rating of AI response (1-5)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('user_feedback', models.TextField(blank=True, null=True)),
                ('is_context_relevant', models.BooleanField(default=True, help_text='Whether this message should be included in context')),
                ('context_weight', models.FloatField(default=1.0, help_text='Weight of this message in context (0.0-1.0)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('is_edited', models.BooleanField(default=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('edit_history', models.JSONField(blank=True, default=list)),
                ('attachments', models.JSONField(default=list, help_text='List of file attachments')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('chat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='chat.chat')),
                ('parent_message', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='chat.chatmessage')),
                ('referenced_assessments', models.ManyToManyField(blank=True, help_text='Assessments referenced in this message', related_name='chat_message_references', to='assessments.flashcard')),
                ('referenced_documents', models.ManyToManyField(blank=True, help_text='Documents referenced in this message', related_name='chat_message_references', to='courses.document')),
            ],
            options={
                'db_table': 'ai_chat_messages',
                'ordering': ['created_at'],
                'indexes': [models.Index(fields=['chat', 'created_at'], name='ai_chat_mes_chat_id_0eb846_idx'), models.Index(fields=['role', 'created_at'], name='ai_chat_mes_role_d475d8_idx'), models.Index(fields=['is_helpful'], name='ai_chat_mes_is_help_e3ecea_idx'), models.Index(fields=['user_rating'], name='ai_chat_mes_user_ra_975d39_idx'), models.Index(fields=['is_context_relevant'], name='ai_chat_mes_is_cont_68a921_idx'), models.Index(fields=['thread_depth'], name='ai_chat_mes_thread__5502b4_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='tutoringsession',
            index=models.Index(fields=['user', 'status'], name='ai_tutoring_user_id_47d99e_idx'),
        ),
        migrations.AddIndex(
            model_name='tutoringsession',
            index=models.Index(fields=['course', 'status'], name='ai_tutoring_course__748c35_idx'),
        ),
        migrations.AddIndex(
            model_name='tutoringsession',
            index=models.Index(fields=['session_type'], name='ai_tutoring_session_05ae6a_idx'),
        ),
        migrations.AddIndex(
            model_name='tutoringsession',
            index=models.Index(fields=['planned_start_time'], name='ai_tutoring_planned_0b08e2_idx'),
        ),
        migrations.AddIndex(
            model_name='tutoringsession',
            index=models.Index(fields=['status'], name='ai_tutoring_status_2f8601_idx'),
        ),
        migrations.AddIndex(
            model_name='chat',
            index=models.Index(fields=['user', 'status'], name='ai_chats_user_id_c384a4_idx'),
        ),
        migrations.AddIndex(
            model_name='chat',
            index=models.Index(fields=['course', 'status'], name='ai_chats_course__bc0e0a_idx'),
        ),
        migrations.AddIndex(
            model_name='chat',
            index=models.Index(fields=['chat_type'], name='ai_chats_chat_ty_e4dec8_idx'),
        ),
        migrations.AddIndex(
            model_name='chat',
            index=models.Index(fields=['is_pinned', 'is_favorite'], name='ai_chats_is_pinn_fa7e3d_idx'),
        ),
        migrations.AddIndex(
            model_name='chat',
            index=models.Index(fields=['last_active_at'], name='ai_chats_last_ac_f040da_idx'),
        ),
        migrations.AddIndex(
            model_name='chat',
            index=models.Index(fields=['created_at'], name='ai_chats_created_567726_idx'),
        ),
    ]
