# Generated by Django 5.1.11 on 2025-07-19 11:23

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('first_name', models.CharField(blank=True, max_length=150)),
                ('last_name', models.CharField(blank=True, max_length=150)),
                ('phone_number', models.CharField(blank=True, max_length=20)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('university', models.CharField(blank=True, max_length=200, null=True)),
                ('study_level', models.CharField(blank=True, choices=[('bachelor', 'Bachelor'), ('master', 'Master'), ('phd', 'PhD'), ('other', 'Other')], max_length=50, null=True)),
                ('study_year', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('field_of_study', models.CharField(blank=True, max_length=200, null=True)),
                ('timezone', models.CharField(default='UTC', max_length=50)),
                ('language', models.CharField(choices=[('en', 'English'), ('no', 'Norwegian'), ('sv', 'Swedish'), ('da', 'Danish')], default='en', max_length=10)),
                ('preferred_study_time', models.CharField(blank=True, choices=[('morning', 'Morning (6-12)'), ('afternoon', 'Afternoon (12-18)'), ('evening', 'Evening (18-24)'), ('night', 'Night (24-6)')], max_length=20, null=True)),
                ('daily_study_goal_minutes', models.PositiveIntegerField(blank=True, default=60, null=True)),
                ('acquisition_source', models.CharField(blank=True, help_text='How they heard about us', max_length=100, null=True)),
                ('acquisition_details', models.CharField(blank=True, help_text='Additional details about acquisition', max_length=255, null=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('last_active_at', models.DateTimeField(blank=True, null=True)),
                ('onboarding_completed', models.BooleanField(default=False)),
                ('stripe_customer_id', models.CharField(blank=True, help_text='Stripe Customer ID (future integration)', max_length=100, null=True, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserActivity',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('activity_type', models.CharField(choices=[('login', 'Login'), ('logout', 'Logout'), ('course_create', 'Course Created'), ('document_upload', 'Document Upload'), ('study_session_start', 'Study Session Started'), ('study_session_end', 'Study Session Ended'), ('quiz_complete', 'Quiz Completed'), ('flashcard_review', 'Flashcard Review'), ('chat_message', 'Chat Message'), ('goal_achieved', 'Goal Achieved')], max_length=50)),
                ('session_id', models.UUIDField(help_text='Frontend session ID for grouping activities')),
                ('resource_type', models.CharField(blank=True, help_text='e.g., course, quiz, flashcard', max_length=50)),
                ('resource_id', models.UUIDField(blank=True, help_text='ID of the resource', null=True)),
                ('duration_seconds', models.PositiveIntegerField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional activity data')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('device_type', models.CharField(choices=[('desktop', 'Desktop'), ('tablet', 'Tablet'), ('mobile', 'Mobile'), ('unknown', 'Unknown')], default='unknown', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_activities',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserApplication',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=150, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('first_name', models.CharField(max_length=150)),
                ('last_name', models.CharField(max_length=150)),
                ('university', models.CharField(blank=True, max_length=200, null=True)),
                ('study_level', models.CharField(blank=True, max_length=50, null=True)),
                ('field_of_study', models.CharField(blank=True, max_length=200, null=True)),
                ('acquisition_source', models.CharField(blank=True, max_length=100, null=True)),
                ('acquisition_details', models.CharField(blank=True, max_length=255, null=True)),
                ('motivation', models.TextField(blank=True, help_text='Why they want to use Aksio', max_length=500, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('withdrawn', 'Withdrawn')], default='pending', max_length=20)),
                ('review_notes', models.TextField(blank=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='application', to=settings.AUTH_USER_MODEL)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_applications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_applications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserFeedback',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('feedback_type', models.CharField(choices=[('bug_report', 'Bug Report'), ('feature_request', 'Feature Request'), ('general_feedback', 'General Feedback'), ('support_request', 'Support Request'), ('complaint', 'Complaint'), ('praise', 'Praise')], max_length=50)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('screenshot', models.ImageField(blank=True, null=True, upload_to='feedback/screenshots/')),
                ('page_url', models.URLField(blank=True, help_text='Page where feedback was given')),
                ('browser_info', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('new', 'New'), ('in_progress', 'In Progress'), ('resolved', 'Resolved'), ('closed', 'Closed')], default='new', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=10)),
                ('admin_response', models.TextField(blank=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('satisfaction_rating', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_feedback', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_feedback',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True, max_length=500, null=True)),
                ('learning_goals', models.TextField(blank=True, max_length=1000, null=True)),
                ('study_style', models.CharField(choices=[('visual', 'Visual'), ('auditory', 'Auditory'), ('kinesthetic', 'Kinesthetic'), ('reading', 'Reading/Writing'), ('mixed', 'Mixed')], default='mixed', max_length=20)),
                ('difficulty_preference', models.CharField(choices=[('easy', 'Start Easy'), ('medium', 'Balanced'), ('hard', 'Challenge Me'), ('adaptive', 'Adaptive')], default='adaptive', max_length=20)),
                ('email_notifications', models.BooleanField(default=True)),
                ('study_reminders', models.BooleanField(default=True)),
                ('progress_reports', models.BooleanField(default=True)),
                ('marketing_emails', models.BooleanField(default=False)),
                ('profile_public', models.BooleanField(default=False)),
                ('show_progress', models.BooleanField(default=True)),
                ('show_study_time', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_profiles',
            },
        ),
        migrations.CreateModel(
            name='UserStreak',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_streak_days', models.PositiveIntegerField(default=0)),
                ('longest_streak_days', models.PositiveIntegerField(default=0)),
                ('current_streak_start', models.DateField(auto_now_add=True)),
                ('last_activity_date', models.DateField(auto_now=True)),
                ('total_study_days', models.PositiveIntegerField(default=0)),
                ('total_study_sessions', models.PositiveIntegerField(default=0)),
                ('streak_milestones_achieved', models.JSONField(default=list, help_text='List of streak milestones reached (e.g., [7, 14, 30])')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='streak', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_streaks',
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='users_email_4b85f2_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['university', 'study_level'], name='users_univers_f44356_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_active', 'is_verified'], name='users_is_acti_6b2a46_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['last_active_at'], name='users_last_ac_ace5f1_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['created_at'], name='users_created_6541e9_idx'),
        ),
        migrations.AddIndex(
            model_name='useractivity',
            index=models.Index(fields=['user', 'activity_type'], name='user_activi_user_id_290628_idx'),
        ),
        migrations.AddIndex(
            model_name='useractivity',
            index=models.Index(fields=['created_at'], name='user_activi_created_9fa3ca_idx'),
        ),
        migrations.AddIndex(
            model_name='useractivity',
            index=models.Index(fields=['session_id'], name='user_activi_session_8012e5_idx'),
        ),
        migrations.AddIndex(
            model_name='useractivity',
            index=models.Index(fields=['resource_type', 'resource_id'], name='user_activi_resourc_b3d2c3_idx'),
        ),
        migrations.AddIndex(
            model_name='useractivity',
            index=models.Index(fields=['user', 'created_at'], name='user_activi_user_id_c742e0_idx'),
        ),
        migrations.AddIndex(
            model_name='userapplication',
            index=models.Index(fields=['status'], name='user_applic_status_955b54_idx'),
        ),
        migrations.AddIndex(
            model_name='userapplication',
            index=models.Index(fields=['email'], name='user_applic_email_e83cdb_idx'),
        ),
        migrations.AddIndex(
            model_name='userapplication',
            index=models.Index(fields=['created_at'], name='user_applic_created_723ee8_idx'),
        ),
        migrations.AddIndex(
            model_name='userfeedback',
            index=models.Index(fields=['status', 'priority'], name='user_feedba_status_0bf090_idx'),
        ),
        migrations.AddIndex(
            model_name='userfeedback',
            index=models.Index(fields=['feedback_type'], name='user_feedba_feedbac_36edfb_idx'),
        ),
        migrations.AddIndex(
            model_name='userfeedback',
            index=models.Index(fields=['created_at'], name='user_feedba_created_1f96f0_idx'),
        ),
        migrations.AddIndex(
            model_name='userfeedback',
            index=models.Index(fields=['user', 'status'], name='user_feedba_user_id_0b789d_idx'),
        ),
    ]
